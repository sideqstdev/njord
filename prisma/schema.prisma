// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  tags      String[]
  lolName   String?
  avatarUrl String?  @default("https://ddragon.leagueoflegends.com/cdn/11.15.1/img/profileicon/29.png")

  // relational fields
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  // stats
  level   Int @default(0) // levels are gained by hitting point thresholds
  points  Int @default(0) // total points gained
  wins    Int @default(0) // how many tournament wins
  entered Int @default(0) // how many tournaments they have entered
  hosted  Int @default(0) // how many tournaments hosted
}

model User {
  id        String   @id @default(uuid())
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  lastLogin DateTime @default(now())
  version   Int      @default(1)

  // personal info
  name      String?
  gamerTag  String  @unique
  email     String  @unique
  password  String
  suspended Boolean @default(false)
  verified  Boolean @default(false)
  // confirmed Boolean @default(false) // email verification

  // relational fields
  profile        Profile?
  posts          Post[]    @relation("UserCreatedPosts")
  likedPosts     Post[]    @relation("UserLikedPosts")
  comments       Comment[] @relation("UserCreatedComments")
  followers      User[]    @relation("UserFollowUser", references: [id])
  following      User[]    @relation("UserFollowUser", references: [id])
  joinedLobbies  Lobby[]   @relation("LobbyPlayer")
  createdLobbies Lobby[]   @relation("LobbyOwner")
}

model Post {
  id          String   @id @default(uuid())
  created     DateTime @default(now())
  updated     DateTime @updatedAt
  title       String
  content     String?
  imageUrl    String?
  twitchUrl   String?
  youtubeUrl  String?
  facebookUrl String?
  websiteUrl  String?
  nsfw        Boolean  @default(false)
  tags        String[]

  // relational fields
  comments Comment[] @relation("PostHasComment")
  user     User?     @relation("UserCreatedPosts", fields: [userId], references: [id]) // post owner
  userId   String? // post owner id
  likedBy  User[]    @relation("UserLikedPosts", references: [id])
}

model Comment {
  id      String   @id @default(uuid())
  created DateTime @default(now())
  updated DateTime @updatedAt

  // relational fields
  user   User   @relation("UserCreatedComments", fields: [userId], references: [id])
  userId String
  post   Post   @relation("PostHasComment", fields: [postId], references: [id])
  postId String
}

model Lobby {
  id          String   @id @default(uuid())
  created     DateTime @default(now())
  updated     DateTime @updatedAt
  title       String   @unique
  description String
  tags        String[]
  prize       Float
  startDate   DateTime
  rank        String
  featured    Boolean
  bannerUrl   String
  status      String
  format      String
  region      String
  maxPlayers  Int      @default(8)
  players     User[]   @relation("LobbyPlayer", references: [id])
  owner       User     @relation("LobbyOwner", fields: [ownerId], references: [id])
  // relational fields
  ownerId     String
}

// enum TournamentRole {
//   ATTENDEE
//   MOD
//   ADMIN
// }
